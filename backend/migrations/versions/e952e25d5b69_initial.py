"""Initial

Revision ID: e952e25d5b69
Revises: 
Create Date: 2025-06-09 13:25:46.968175

"""
from typing import Sequence, Union
# adding sqlmodel and pgvector so migrations can run without errors (module not found)
import sqlmodel
import pgvector
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e952e25d5b69'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE EXTENSION IF NOT EXISTS vector")
    op.create_table('appointment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('pet_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('owner_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('requested_service', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('arrival_time', sa.DateTime(), nullable=False),
    sa.Column('done', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('appointmentsorder',
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('order', sa.ARRAY(sa.Integer()), nullable=True),
    sa.PrimaryKeyConstraint('date')
    )
    op.create_table('data_documents',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('metadata_', sa.JSON(), nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.Column('text_search_tsv', postgresql.TSVECTOR(), nullable=True),
    sa.Column('text', sa.String(), nullable=False),
    sa.Column('node_id', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_document_embedding', 'data_documents', ['embedding'], unique=False, postgresql_using='hnsw', postgresql_with={'m': 16, 'ef_construction': 64}, postgresql_ops={'embedding': 'vector_cosine_ops'})
    op.create_table('feedback',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('feedback', sa.Enum('positive', 'negative', name='feedbacktype'), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('chat_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['chat_id'], ['data_chatstore.key'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_data_chatstore_key'), 'data_chatstore', ['key'], unique=True)
    op.create_index(op.f('ix_data_chatstore_value'), 'data_chatstore', ['value'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_data_chatstore_key'), table_name='data_chatstore')
    op.create_unique_constraint(op.f('data_chatstore:unique_key'), 'data_chatstore', ['key'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('data_chatstore:idx_key'), 'data_chatstore', ['key'], unique=False)
    op.drop_table('feedback')
    op.drop_index('ix_document_embedding', table_name='data_documents', postgresql_using='hnsw', postgresql_with={'m': 16, 'ef_construction': 64}, postgresql_ops={'embedding': 'vector_cosine_ops'})
    op.drop_table('data_documents')
    op.drop_table('appointmentsorder')
    op.drop_table('appointment')
    # ### end Alembic commands ###
